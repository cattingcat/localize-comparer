<unityParent xmlns="http://schemas.microsoft.com/practices/2010/unity">
  <assembly name="KasperskyLab.CompanyAccount.Services" />
  <assembly name="KasperskyLab.CompanyAccount.ServicesImpl" />
  <assembly name="KasperskyLab.CompanyAccount.Settings" />
  <assembly name="KasperskyLab.CompanyAccount.FileStorage" />
  <assembly name="KasperskyLab.CompanyAccount.FileStorageService" />
  <assembly name="KasperskyLab.CompanyAccount.WcfServiceWrapper" />
  <assembly name="KasperskyLab.CompanyAccount.Logging" />
  <assembly name="KasperskyLab.CompanyAccount.Dal" />
  <assembly name="KasperskyLab.CompanyAccount.Infrastructure" />
  <assembly name="KasperskyLab.CompanyAccount.WcfInfrastructure" />
  <assembly name="KasperskyLab.CompanyAccount.CircuitBreaker" />
  <assembly name="System.ServiceModel, 4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />

  <typeAliases>
    <typeAlias alias="IErrorHandler"
        type="System.ServiceModel.Dispatcher.IErrorHandler, System.ServiceModel,
            Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />

    <typeAlias alias="IServiceBehavior"
        type="System.ServiceModel.Description.IServiceBehavior, System.ServiceModel,
            Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  </typeAliases>

  <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension, Microsoft.Practices.Unity.Interception.Configuration" />

  <container>
    <extension type="Interception" />


    <register type="KasperskyLab.CompanyAccount.Logging.ILoggerFactory"
              mapTo="KasperskyLab.CompanyAccount.Logging.LoggerFactory">
      <lifetime type="singleton" />
    </register>
    
    <register type="KasperskyLab.CompanyAccount.ServicesImpl.Common.UserUtils.ICurrentUserProvider"
            mapTo="KasperskyLab.CompanyAccount.ServicesImpl.Common.UserUtils.Impl.CurrentUserProvider">
      <lifetime type="singleton" />
    </register>

    <register type="KasperskyLab.CompanyAccount.ServicesImpl.Common.AccessPolicy">
      <lifetime type="singleton" />
    </register>

    <register type="KasperskyLab.CompanyAccount.ServicesImpl.Common.UserUtils.IUserProvider"
          mapTo="KasperskyLab.CompanyAccount.ServicesImpl.Common.UserUtils.Impl.UserProvider"/>
    
    <register type="KasperskyLab.CompanyAccount.ServicesImpl.User.PasswordProvider"/>

    <register type="KasperskyLab.CompanyAccount.ServicesImpl.Request.RequestManager"/>
    
    <!-- ================================ DAL ================================ -->
    
    <register type ="KasperskyLab.CompanyAccount.Infrastructure.PoolObject.CleanStrategy.PoolObjectClearStrategySettings">
      <constructor>
        <param name="maxCountForStartClear" value="70"/>
        <param name="countClean" value="20"/>
        <param name="cleanEvery" value="00:05:00"/>
      </constructor>
      <lifetime type="singleton"/>
    </register>
    
    <register type ="KasperskyLab.CompanyAccount.ServicesImpl.Dal.DbProxyPoolWrapperClearStrategy">
      <lifetime type="singleton"/>
    </register>

    <register type ="KasperskyLab.CompanyAccount.Dal.Data.Context.ARProxyFactory">
      <lifetime type="singleton" />
    </register>
    
    <register type="KasperskyLab.CompanyAccount.Dal.Data.Context.IARProxyFactory"
              mapTo="KasperskyLab.CompanyAccount.Dal.Data.Context.ARProxyPoolFactory">
      <lifetime type="hierarchical" />
    </register>
    
    <register type="KasperskyLab.CompanyAccount.Dal.Data.Context.IContextFactory"
                mapTo="KasperskyLab.CompanyAccount.Dal.Data.Context.ARContextFactory"/>
    
      <!-- ================================ FILES ================================ -->

    <register type="KasperskyLab.CompanyAccount.FileStorage.IFileStorage"
          mapTo="KasperskyLab.CompanyAccount.FileStorage.FtpFileStorage">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.FileStorage.InterceptorBehaviors.FileStorageInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
      <policyInjection />
      <lifetime type="hierarchical" />
    </register>

    <register type="KasperskyLab.CompanyAccount.FileStorageService.IFileStorageService"
          mapTo="KasperskyLab.CompanyAccount.FileStorageService.FileStorageService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.FileStorageService.InterceptorBehaviors.FileStorageServiceInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
    </register>
    <!-- ================================ END FILES ================================ -->

    <!-- ================================ Circuit Breaker ================================ -->

    <!--Фабрика синхронизации контекста-->
    <register type="KasperskyLab.CompanyAccount.CircuitBreaker.Utilities.Async.IContextSynchronizatorFactory"
      mapTo="KasperskyLab.CompanyAccount.CircuitBreaker.Utilities.Async.OperationContextSynchronizatorFactory">
      <lifetime type="singleton" />
    </register>

    <!--Повто по числу попыток-->
    <register name="attemptCountExit"
              type="KasperskyLab.CompanyAccount.CircuitBreaker.Rules.ICircuitBreakerInvokeRule"
              mapTo="KasperskyLab.CompanyAccount.CircuitBreaker.Rules.AttemptCountExitCircuitBreakerInvokeRule" >
      <constructor>
        <param name="attemptCount" value="2"/>
      </constructor>
      <lifetime type="singleton" />
    </register>

    <!--Пауза между попытками-->
    <register name="sleepPause"
              type="KasperskyLab.CompanyAccount.CircuitBreaker.Rules.ICircuitBreakerInvokeRule"
              mapTo="KasperskyLab.CompanyAccount.CircuitBreaker.Rules.SleepPauseCircuitBreakerInvokeRule" >
      <constructor>
        <param name="pause" value="00:00:01"/>
      </constructor>
      <lifetime type="singleton" />
    </register>

    <!--Исключения, которые допустимо повторять-->
    <register name="whiteException"
              type="KasperskyLab.CompanyAccount.CircuitBreaker.Rules.ICircuitBreakerInvokeRule"
              mapTo="KasperskyLab.CompanyAccount.CircuitBreaker.Rules.ExceptionMessageFilterCircuitBreakerInvokeRule" >
      <constructor>
        <param name="exceptionType" value="BMC.ARSystem.ARException, BMC.ARSystem"/>
        <!--Тип исключения-->
        <param name="regexPattern" value="^Error\s*\((90|91|92|93|94|95)\):"/>
        <!--Паттерн текста сообщения-->
      </constructor>
      <lifetime type="singleton" />
    </register>

    <!--Список всех используемых пост-проверок для поторного вызова метода-->
    <register name="postInvokeRule"
              type="KasperskyLab.CompanyAccount.CircuitBreaker.Rules.ICircuitBreakerInvokeRule"
              mapTo="KasperskyLab.CompanyAccount.CircuitBreaker.Rules.AllCircuitBreakerInvokeRule" >
      <constructor>
        <param name="rules">
          <array>
            <dependency name="attemptCountExit" />
            <dependency name="whiteException" />
            <dependency name="sleepPause" />
          </array>
        </param>
      </constructor>
      <lifetime type="singleton" />
    </register>

    <!--Политика вызова метода (Sync/Async)-->
    <register name="policy"
          type="KasperskyLab.CompanyAccount.CircuitBreaker.Policies.ICircuitBreakerPolicy"
          mapTo="KasperskyLab.CompanyAccount.CircuitBreaker.Policies.ContextAsyncCircuitBreakerPolicy" >
      <constructor>
        <param name="policyName" value="ARProxy"/>
        <!--Наименование политики для логов-->
        <param name="synchronizatorFactory" />
        <!--Фабрика синхронизации контекста-->
        <param name="timeout" value="00:04:00.000"/>
        <!--Тип исключения-->
        <param name="configureAwait" value="false"/>
        <!--configureAwait-->
      </constructor>
      <lifetime type="singleton" />
    </register>

    <!--Класс-параметр circuit breaker-->
    <register type="KasperskyLab.CompanyAccount.CircuitBreaker.CircuitBreakerBuilder">
      <constructor>
        <param name="preInvokeRule">
          <dependency type="KasperskyLab.CompanyAccount.CircuitBreaker.Rules.TrueCircuitBreakerInvokeRule" />
        </param>
        <param name="postInvokeRule">
          <dependency name="postInvokeRule" />
        </param>
        <param name="policy">
          <dependency name="policy" />
        </param>
      </constructor>
      <lifetime type="singleton" />
    </register>

    <!-- ================================ END Circuit Breaker ================================ -->

    <!-- ================================ SERVICES ================================ -->
    <register type="KasperskyLab.CompanyAccount.Services.Diagnostic.IDiagnosticService"
            mapTo="KasperskyLab.CompanyAccount.ServicesImpl.Diagnostic.DiagnosticService">
      <lifetime type="hierarchical" />
    </register>

    <register type="KasperskyLab.CompanyAccount.Services.Request.IRequestService"
          mapTo="KasperskyLab.CompanyAccount.ServicesImpl.Request.RequestService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
      <policyInjection />
      <lifetime type="hierarchical" />
    </register>

    <register type="KasperskyLab.CompanyAccount.Services.License.ILicenseService"
      mapTo="KasperskyLab.CompanyAccount.ServicesImpl.License.LicenseService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
      <policyInjection />
      <lifetime type="hierarchical" />
    </register>

    <register type="KasperskyLab.CompanyAccount.Services.Company.ICompanyService"
          mapTo="KasperskyLab.CompanyAccount.ServicesImpl.Company.CompanyService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
      <policyInjection />
      <lifetime type="hierarchical" />
    </register>

    <register  type="KasperskyLab.CompanyAccount.Services.Contract.IContractService"
          mapTo="KasperskyLab.CompanyAccount.ServicesImpl.Contract.ContractService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
      <policyInjection />
      <lifetime type="hierarchical" />
    </register>

    <register  type="KasperskyLab.CompanyAccount.Services.Broadcast.IBroadcastService"
          mapTo="KasperskyLab.CompanyAccount.ServicesImpl.Broadcast.BroadcastService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
      <policyInjection />
      <lifetime type="hierarchical" />
    </register>

    <register type="KasperskyLab.CompanyAccount.Services.Culture.ICultureService"
          mapTo="KasperskyLab.CompanyAccount.ServicesImpl.Culture.CultureService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <lifetime type="hierarchical" />
    </register>

    <register type="KasperskyLab.CompanyAccount.Services.FileAgreement.IFileAgreementService"
          mapTo="KasperskyLab.CompanyAccount.ServicesImpl.FileAgreement.FileAgreementService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <lifetime type="hierarchical" />
    </register>


    <register type="KasperskyLab.CompanyAccount.Services.User.IUserService"
          mapTo="KasperskyLab.CompanyAccount.ServicesImpl.User.UserService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
      <policyInjection />
      <lifetime type="hierarchical" />
    </register>


    <!-- ================================ STS SERVICES ================================ -->
    <register type="KasperskyLab.CompanyAccount.Services.StsAuthentication.IStsAuthenticationService"
             mapTo="KasperskyLab.CompanyAccount.ServicesImpl.StsAuthentication.StsAuthenticationService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
      <policyInjection />
      <lifetime type="hierarchical" />
    </register>

    <register type="KasperskyLab.CompanyAccount.Services.Session.ISessionService"
          mapTo="KasperskyLab.CompanyAccount.ServicesImpl.Session.SessionService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
      <policyInjection />
      <lifetime type="hierarchical" />
    </register>

    <register type="KasperskyLab.CompanyAccount.Services.Blocking.IBlockingService"
          mapTo="KasperskyLab.CompanyAccount.ServicesImpl.Blocking.BlockingService">
      <interceptionBehavior type="KasperskyLab.CompanyAccount.Infrastructure.InterceptorBehaviors.BaseInterceptorBehavior"/>
      <interceptor type="InterfaceInterceptor"/>
      <policyInjection />
      <lifetime type="hierarchical" />
    </register>

  </container>
  <!--Провайдеры для конвертов логирования, сейчас используется SoapHeaderConverter-->
  <!--<register type="KasperskyLab.CompanyAccount.Infrastructure.IRequestInfoProvider"
          mapTo="KasperskyLab.CompanyAccount.WcfInfrastructure.WcfRequestInfoProvider">
      <lifetime type="PerThreadLifetimeManager" />
    </register>-->

  <!--<register type="KasperskyLab.CompanyAccount.Infrastructure.IServiceInfoProvider"
          mapTo="KasperskyLab.CompanyAccount.WcfInfrastructure.WcfServiceInfoProvider">
      <lifetime type="PerThreadLifetimeManager" />
    </register>-->

  <!--<register type="KasperskyLab.CompanyAccount.Infrastructure.Logging.DataProviders.ICurrentUserInfoProvider"
          mapTo="KasperskyLab.CompanyAccount.Services.Infrastructure.WcfCurrentUserInfoProvider">
      <lifetime type="PerThreadLifetimeManager" />
    </register>-->
  <!--=====================================-->
</unityParent>